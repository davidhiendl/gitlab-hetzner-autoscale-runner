apiVersion: v1
kind: Secret

metadata:
  name: {{ template "gitlab-runner-hetzner-autoscale.resname" . }}-config
  labels: {{ include "gitlab-runner-hetzner-autoscale.labels" . | indent 4 }}
    component: config

type: Opaque

stringData:

  REGISTRATION_TOKEN: {{ .Values.runner.registrationToken | quote }}
  CI_SERVER_URL: {{ .Values.runner.ciServerUrl | quote }}

  register.sh: |
    #!/bin/bash

    # gitlab-runner data directory
    DATA_DIR="/etc/gitlab-runner"
    CONFIG_FILE=${CONFIG_FILE:-$DATA_DIR/config.toml}
    CONFIG_TEMPLATE_FILE=${CONFIG_TEMPLATE_FILE:-/gitlab-runner-config/config.template.toml}
    # custom certificate authority path
    CA_CERTIFICATES_PATH=${CA_CERTIFICATES_PATH:-$DATA_DIR/certs/ca.crt}
    LOCAL_CA_PATH="/usr/local/share/ca-certificates/ca.crt"

    update_ca() {
      echo "Updating CA certificates..."
      cp "${CA_CERTIFICATES_PATH}" "${LOCAL_CA_PATH}"
      update-ca-certificates --fresh >/dev/null
    }

    if [ -f "${CA_CERTIFICATES_PATH}" ]; then
      # update the ca if the custom ca is different than the current
      cmp --silent "${CA_CERTIFICATES_PATH}" "${LOCAL_CA_PATH}" || update_ca
    fi

    # check variables for runner registration
    if [[ -z "$REGISTRATION_TOKEN" ]]; then
        echo "ERROR: missing env variable: REGISTRATION_TOKEN"
        exit 1
    fi
    if [[ -z "$CI_SERVER_URL" ]]; then
        echo "ERROR: missing env variable: CI_SERVER_URL"
        exit 1
    fi

    REGISTER_ARGS=""

    {{ if .Values.runner.locked }}
    REGISTER_ARGS="$REGISTER_ARGS --locked"
    {{ end }}

    {{ if .Values.runner.tagList }}
    REGISTER_ARGS="$REGISTER_ARGS --tag-list {{ join "," .Values.runner.tagList }}
    {{ end }}

    # register runner
    gitlab-runner register \
        -n \
        --template-config=$CONFIG_TEMPLATE_FILE \
        --config=$CONFIG_FILE \
        --executor docker+machine \
        --run-untagged="{{ .Values.runner.runUntagged }}" \ 
        --docker-image=ruby:2.5 \
        $REGISTER_ARGS \

  config.template.toml: |
    # docker+machine based on gitlab.com shared runner config: 
    # (old) https://docs.gitlab.com/ee/user/gitlab_com/#configtoml
    # (new) https://docs.gitlab.com/ee/ci/runners/build_cloud/linux_build_cloud.html#configtoml
    concurrent = 1
    check_interval = 3

    [session_server]
      session_timeout = 1800

    [[runners]]
      name = "test-runner"
      url = "{{ .Values.runner.ciServerUrl }}"
      pre_clone_script = "eval \"$CI_PRE_CLONE_SCRIPT\""
      executor = "docker+machine"
      environment = [
        "DOCKER_DRIVER=overlay2",
        "DOCKER_TLS_CERTDIR="
      ]
      # maximum number of parallel jobs to execute ( more or less count of vms active at the same time)
      limit = 2

      [runners.cache]
      [runners.docker]
        image = "ruby:2.5"
        privileged = true
        volumes = [
          "/certs/client",
          "/dummy-sys-class-dmi-id:/sys/class/dmi/id:ro", # Make kaniko builds work on GCP.
        #  "/cache"
        ]
        #tls_verify = false
        #image = "docker:latest"
        #image = "docker:19.03.15"
        #disable_entrypoint_overwrite = false
        #oom_kill_disable = false
        # disable_cache = false
        # shm_size = 536870912
      [runners.machine]
        # dont keep any idle vms alive, startup time is low enough
        IdleCount = 0
        # kill off instance if idle more then 1800s
        IdleTime = 1800
        MaxBuilds = 10
        MachineDriver = "hetzner"
        MachineName = "runner-%s"
        MachineOptions = [
            "hetzner-api-token={{ .Values.hetzner.apiToken }}", 
            # "hetzner-image-id=32116616",
            "hetzner-image={{ .Values.hetzner.image }}",
            # "hetzner-image=debian-10",
            "hetzner-server-location={{ .Values.hetzner.serverLocation }}",
            "hetzner-server-type={{ .Values.hetzner.serverType }}",
            # see for available versions: https://github.com/rancher/install-docker/tree/master/dist
            # "engine-install-url=https://releases.rancher.com/install-docker/19.03.15.sh"
            # "engine-install-url=https://raw.githubusercontent.com/davidhiendl/gitlab-runner-hetzner-autoscale/master/chart/install-scripts/hetzner-ubuntu-docker-fastinstall.sh"
            "engine-install-url={{ .Values.hetzner.engineInstallUrl }}",
            """hetzner-user-data=
            #cloud-config
            runcmd:
              - |
                # run the install script via cloud init
                curl -s {{ .Values.hetzner.cloudInitInstallUrl }} | bash -s
              
                # wait for the 10-machine file to exist, then restart the agent
                while sleep 1; do
                  if [ -e /etc/systemd/system/docker.service.d/10-machine.conf ]; then
                    echo "found /etc/systemd/system/docker.service.d/10-machine.conf file, waiting 1s ..."
                    sleep 1
                    echo "restarting docker ..."
                    systemctl restart docker

                    {{ if $.Values.prepullImages }}
                    # pre-pull images
                    echo "pre-pulling images ..."
                    sleep 3
                    {{- range $.Values.prepullImages }}
                    docker pull {{ . }}
                    {{- end }}
                    {{ end }}

                    echo "cloud-init background tasks completed"

                    break
                  fi
                done &

          """
        ]
        OffPeakTimezone = ""
        OffPeakIdleCount = 0
        OffPeakIdleTime = 0

